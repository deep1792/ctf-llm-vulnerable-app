name: CTF DevSecOps Pipeline

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master]
  schedule:
    - cron: '0 6 * * *'  # Daily security scans at 6 AM UTC

env:
  DOCKER_IMAGE: ctf-llm-app

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        cd src
        pip install -r requirements.txt
        
    - name: Run Bandit SAST
      run: |
        pip install bandit
        echo "Running Bandit SAST scan - intentional vulnerabilities expected for CTF"
        bandit -r src/ -f json -o bandit-results.json --exit-zero
        echo "Bandit scan completed successfully"
        
    - name: Upload Bandit results
      uses: actions/upload-artifact@v4
      with:
        name: bandit-results
        path: bandit-results.json
        retention-days: 30

    - name: Check for hardcoded secrets
      run: |
        echo "Scanning for hardcoded secrets (intentional for CTF)"
        if grep -r "password.*=" src/ || grep -r "secret_key.*=" src/; then
          echo "Found hardcoded secrets - intentional for CTF challenges"
        else
          echo "No hardcoded secrets found"
        fi

    - name: Run Semgrep for code patterns
      uses: semgrep/semgrep-action@v1
      with:
      #  config: p/ci
        output: semgrep-results.sarif
        
    - name: Debug - List Semgrep files
      run: |
        echo "Current directory:"
        pwd
        echo "All files:"
        find . -type f -name "*.sarif" || echo "No SARIF files found"
        
    - name: Upload Semgrep results
      if: hashFiles('semgrep-results.sarif') != ''
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: semgrep-results.sarif

  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE }}:latest .
        echo "Docker image built successfully"
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.DOCKER_IMAGE }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: 0
        
    - name: Debug - List Trivy files
      run: |
        echo "Current directory:"
        pwd
        echo "All files:"
        find . -type f -name "*.sarif" || echo "No SARIF files found"
        
    - name: Upload Trivy results
      if: hashFiles('trivy-results.sarif') != ''
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-results.sarif

    - name: Check Dockerfile security
      run: |
        echo "Dockerfile Security Review:"
        echo "Using slim base image: python:3.9-slim"
        echo "Intentional security choices for CTF:"
        echo "- Running as root"
        echo "- No multi-stage build"
        echo "- Minimal security hardening"

  dependency-scan:
    name: Dependency Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'ctf-llm-app'
        path: './src'
        format: 'SARIF'
        args: '--failOnCVSS 0'
        
    - name: Debug - List Dependency Check files
      run: |
        echo "Current directory:"
        pwd
        echo "All files:"
        find . -type f -name "*.sarif" || echo "No SARIF files found"
        
    - name: Upload Dependency Check results
      if: hashFiles('reports/dependency-check-report.sarif') != ''
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'reports/dependency-check-report.sarif'

  application-test:
    name: Application Testing
    runs-on: ubuntu-latest
    needs: [security-scan, container-security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        cd src
        pip install -r requirements.txt
        
    - name: Test application startup
      run: |
        cd src
        echo "Testing application startup"
        timeout 15s python app.py &
        sleep 5
        echo "Application started successfully"
        
    - name: Test basic functionality
      run: |
        echo "Testing application endpoints"
        cd src
        python app.py &
        APP_PID=$!
        sleep 3
        
        curl -s http://localhost:5000/ | grep -q "CTF" && echo "Homepage loaded successfully" || echo "Homepage failed"
        curl -s http://localhost:5000/challenges | grep -q "Challenges" && echo "Challenges page loaded successfully" || echo "Challenges page failed"
        
        kill $APP_PID
        wait $APP_PID 2>/dev/null

  security-report:
    name: Security Findings Report
    runs-on: ubuntu-latest
    needs: [security-scan, container-security, dependency-scan, application-test]
    if: always()
    
    steps:
    - name: Download Bandit results
      uses: actions/download-artifact@v4
      with:
        name: bandit-results
        
    - name: Generate Security Report
      run: |
        echo "CTF LLM App Security Assessment Report" > $GITHUB_STEP_SUMMARY
        echo "Generated: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "Executive Summary" >> $GITHUB_STEP_SUMMARY
        echo "This CTF application contains intentional vulnerabilities for security education." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "SAST Findings (Bandit):" >> $GITHUB_STEP_SUMMARY
        echo "Hardcoded passwords - Intentional for CTF challenges" >> $GITHUB_STEP_SUMMARY
        echo "Command injection vulnerabilities - Part of LLM07 challenge" >> $GITHUB_STEP_SUMMARY
        echo "SQL injection vulnerabilities - Part of authentication challenge" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "Container Security (Trivy):" >> $GITHUB_STEP_SUMMARY
        echo "Base image vulnerabilities scanned" >> $GITHUB_STEP_SUMMARY
        echo "No critical vulnerabilities in runtime" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "Dependency Security (OWASP DC):" >> $GITHUB_STEP_SUMMARY
        echo "Dependencies scanned for known vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "No high-severity issues in direct dependencies" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "CTF Challenge Status" >> $GITHUB_STEP_SUMMARY
        echo "LLM01 Prompt Injection - Implemented" >> $GITHUB_STEP_SUMMARY
        echo "LLM02 Insecure Output - Implemented" >> $GITHUB_STEP_SUMMARY
        echo "LLM07 Insecure Plugins - Implemented" >> $GITHUB_STEP_SUMMARY
        echo "SQL Injection Auth - Implemented" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "Deploy to AWS for real-world testing" >> $GITHUB_STEP_SUMMARY
        echo "Add more LLM vulnerability challenges" >> $GITHUB_STEP_SUMMARY
        echo "Implement monitoring and alerting" >> $GITHUB_STEP_SUMMARY
        echo "Add AI-powered security tools (CodeGuru)" >> $GITHUB_STEP_SUMMARY
