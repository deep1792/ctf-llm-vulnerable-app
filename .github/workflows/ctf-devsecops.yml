name: CTF DevSecOps Pipeline

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master]

env:
  DOCKER_IMAGE: ctf-llm-app

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        cd src
        pip install -r requirements.txt
        
    - name: Run Bandit SAST
      run: |
        pip install bandit
        echo "=== BANDIT SAST SCAN ==="
        echo "Intentional vulnerabilities expected for CTF"
        bandit -r src/ -f txt
        echo "Bandit scan completed"

    - name: Run Semgrep with CTF-specific rules
      run: |
        pip install semgrep
        echo "=== SEMGREP SCAN ==="
        echo "Excluding public host rule for CTF deployment"
        semgrep --config=p/ci --exclude-rule=python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host
        echo "Semgrep completed"

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE }}:latest .
        echo "Docker image built successfully"
        
    - name: Install Trivy for detailed scanning
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
        trivy --version
        
    - name: Run Trivy vulnerability scan with full output
      run: |
        echo "=== TRIVY VULNERABILITY SCAN ==="
        echo "Full vulnerability report:"
        trivy image --format table --exit-code 0 ${{ env.DOCKER_IMAGE }}:latest
        echo ""
        echo "=== VULNERABILITY SUMMARY ==="
        trivy image --format json ${{ env.DOCKER_IMAGE }}:latest | jq -r '.Results[]? | select(.Vulnerabilities) | "\(.Target): \(.Vulnerabilities | length) vulnerabilities found"'

  dependency-check:
    name: Dependency Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install pip-audit for dependency scanning
      run: |
        pip install pip-audit
        pip-audit --version
        
    - name: Run pip-audit dependency scan
      run: |
        echo "=== DEPENDENCY VULNERABILITY SCAN ==="
        cd src
        pip-audit -r requirements.txt

  security-report:
    name: Security Findings Report
    runs-on: ubuntu-latest
    needs: [security-scan, container-security, dependency-check]
    
    steps:
    - name: Generate Comprehensive Security Report
      run: |
        echo "# CTF LLM Application - Security Assessment Report" > $GITHUB_STEP_SUMMARY
        echo "**Generated:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "All security scans completed successfully. Below are the findings:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Tools Executed" >> $GITHUB_STEP_SUMMARY
        echo "- **Bandit**: Static Application Security Testing" >> $GITHUB_STEP_SUMMARY
        echo "- **Semgrep**: Code Pattern Analysis" >> $GITHUB_STEP_SUMMARY
        echo "- **Trivy**: Container Vulnerability Scanning" >> $GITHUB_STEP_SUMMARY
        echo "- **pip-audit**: Dependency Vulnerability Check" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Intentional CTF Vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "The following vulnerabilities are implemented for educational purposes:" >> $GITHUB_STEP_SUMMARY
        echo "- SQL Injection in authentication system" >> $GITHUB_STEP_SUMMARY
        echo "- Command Injection in plugin architecture" >> $GITHUB_STEP_SUMMARY
        echo "- XSS through AI response handling" >> $GITHUB_STEP_SUMMARY
        echo "- Hardcoded credentials and secrets" >> $GITHUB_STEP_SUMMARY
        echo "- Training data leakage" >> $GITHUB_STEP_SUMMARY
        echo "- Prompt injection vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "The application is ready for AWS deployment. Check the pipeline logs for detailed vulnerability information." >> $GITHUB_STEP_SUMMARY
